#pragma once

#include "ltxjs.h"
#include <atomic>

namespace mm_frames {

	constexpr auto TB = (1LL << 40);
	const int64_t i64sign = *((int64_t*)"MapFrame");

	
	struct _initer_t {
		ipc_utils::COMInitF_t cif;
	};

	template<class _FRAME>
	struct base_op_t {

		struct FM_header_t {
			int64_t signature;
			int64_t cursor;
			int64_t frame_size;
			int64_t byte_size;
			int64_t offset;
			char info[0];
		};

		typedef _FRAME frame_t;
		

		static HRESULT check_error(HRESULT hr) {
			return ipc_utils::com_dispcaller_t::exception_helper_t::check_error(hr);
		}

		char* info() {
			return mm_header->info;
		}

		std::atomic<int64_t>& cursor_ref() {
			auto pcursor = (std::atomic<int64_t>*) & mm_header->cursor;
			return *pcursor;
		}

		base_op_t(variant_t o, int64_t offset):
			mm_header(o,0, offset)
		{
			check_error(mm_header.hr);
		}

		frame_t* operator [](int64_t i) {
			HRESULT hr;
			auto pt = mm_header.intf();
			auto frame_size = mm_header->frame_size;
			auto offset = mm_header->offset;

			check_error(hr = pt->DecommitRegionPtr(frame_ptr));
			check_error(hr = pt->CommitRegionPtr(offset + i * frame_size, frame_size, (void**)&frame_ptr));

			return frame_ptr;

		}

		inline FM_header_t* operator ->() {
			return mm_header.ptr;
		}

		//ipc_utils::COMInitF_t cif;
		i_mm_region_ptr::ptr_t<FM_header_t> mm_header;
		frame_t* frame_ptr;

	};


	template<class _FRAME>
	struct writer_t :_initer_t, base_op_t<_FRAME> {
		typedef _FRAME frame_t;
		typedef ipc_utils::com_dispcaller_t caller_t;

		writer_t(int64_t frame_size = sizeof(frame_t), int64_t byte_size = TB, int64_t offset = 4096) :
			_initer_t(),
			base_op_t<_FRAME>(ipc_utils::bindObject("ltx.bind:mm_buffer:len=#1;flags.sparse=1;flags.unsafe=1;")(byte_size),offset),
			stub(ipc_utils::bindObject("ltx.bind:stub")){

			this->mm_header->cursor = 0;
			this->mm_header->frame_size = frame_size;
			this->mm_header->byte_size = byte_size;
			this->mm_header->offset = offset;
			this->mm_header->signature = i64sign;
		
			ref = stub(this->mm_header.intf());
		}

		frame_t* frame_end() {
			return (*this)[this->cursor_ref()];
		}

		std::atomic<int64_t>& cursor() {
			
			return this->cursor_ref();
		}

		char* objref() {
			return ref;
		}

		olestr_t ref;
		caller_t stub;

	};

	template<class _FRAME>
	struct reader_t :_initer_t,base_op_t<_FRAME> {
		typedef _FRAME frame_t;
		typedef ipc_utils::com_dispcaller_t caller_t;

		template<class _STR>
		reader_t(_STR objref) :
			_initer_t(),
			base_op_t<_FRAME>(ipc_utils::bindObject(objref)(), 4096) {

			this->check_error(this->mm_header.hr);
			if (i64sign != this->mm_header->signature) {
				this->check_error(E_INVALIDARG);
			}
		}

		int64_t cursor() {

			return this->cursor_ref();
		}

		frame_t* frame_end() {
			return (*this)[cursor()];
		}

		

	};

	/*

	struct FM_header_t {
		int64_t signature;
		int64_t cursor;
		int64_t frame_size;
		int64_t byte_size;
		int64_t offset;
		char info[0];
	};



	//  Parent Process
	template<class _FRAME>
	struct writer_t {
		typedef _FRAME frame_t;
		typedef ipc_utils::com_dispcaller_t caller_t;

		static HRESULT check_error(HRESULT hr) {
			return ipc_utils::com_dispcaller_t::exception_helper_t::check_error(hr);
		}

		writer_t(int64_t _frame_size = sizeof(frame_t), int64_t _byte_size = TB, int64_t _offset = 4096) :
			mm_header(ipc_utils::bindObject("ltx.bind:mm_buffer:len=#1;flags.sparse=1;flags.unsafe=1;")(_byte_size), 0, _offset),
			stub(ipc_utils::bindObject("ltx.bind:stub")),
			frame_size(_frame_size), byte_size(_byte_size), offset(_offset), frame_ptr(NULL)
		{

			check_error(mm_header.hr);

			mm_header->cursor = 0;
			mm_header->frame_size = frame_size;
			mm_header->byte_size = byte_size;
			mm_header->offset = offset;
			mm_header->signature = i64sign;

			ref = stub(mm_header.intf());

		};

		char* info() {
			return mm_header->info;
		}

		std::atomic<int64_t>& cursor() {
			auto pcursor = (std::atomic<int64_t>*) & mm_header->cursor;
			return *pcursor;
		}

		
		
		
		olestr_t ref;

		ipc_utils::COMInitF_t cif;
		i_mm_region_ptr::ptr_t<FM_header_t> mm_header;		
		caller_t stub;


		frame_t* operator [](int64_t i) {
			HRESULT hr;
			auto pt = mm_header.intf();
			auto frame_size = mm_header->frame_size;
			auto offset = mm_header->offset;

			check_error(hr = pt->DecommitRegionPtr(frame_ptr));
			check_error(hr = pt->CommitRegionPtr(offset + i * frame_size, frame_size, (void**)&frame_ptr));

			return frame_ptr;

		}

		frame_t* frame_end() {
			return (*this)[cursor()];
		}

		char* objref() {
			return ref;
		}

		
		frame_t* frame_ptr;
		int64_t frame_size;
		int64_t byte_size;
		int64_t offset;

	};


	template<class _FRAME>
	struct reader_t {
		typedef _FRAME frame_t;


		static HRESULT check_error(HRESULT hr) {
			return ipc_utils::com_dispcaller_t::exception_helper_t::check_error(hr);
		};

		template <class CH>
		reader_t(CH objref) :
			//cif(COINIT_MULTITHREADED),
			mm_header(ipc_utils::bindObject(olestr_t(objref))(), 0, 4096), frame_ptr(NULL)
		{

			check_error(mm_header.hr);

			if (i64sign != mm_header->signature)
				check_error(E_INVALIDARG);

			frame_size = mm_header->frame_size;
			byte_size = mm_header->byte_size;
			offset = mm_header->offset;


		};




		int64_t cursor() {
			auto pcursor = (std::atomic<int64_t>*) & mm_header->cursor;
			return *pcursor;
		}

		char* info() {
			return mm_header->info;
		}

		ipc_utils::COMInitF_t cif;
		i_mm_region_ptr::ptr_t<FM_header_t> mm_header;

		frame_t* operator [](int64_t i) {
			HRESULT hr;
			auto pt = mm_header.intf();
			check_error(hr = pt->DecommitRegionPtr(frame_ptr));
			check_error(hr = pt->CommitRegionPtr(offset + i * frame_size, frame_size, (void**)&frame_ptr));
			return frame_ptr;

		}

		frame_t* frame_last() {
			return *this[cursor() - 1];
		}


		
		frame_t* frame_ptr;
		int64_t frame_size;
		int64_t byte_size;
		int64_t offset;

	};
	*/


} //namespace mm_frames




